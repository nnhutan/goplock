basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.User:
    properties:
      Email:
        type: string
      ID:
        type: string
      Name:
        type: string
      Password:
        maxLength: 32
        minLength: 8
        type: string
      Photo:
        type: string
      Provider:
        type: string
      Role:
        type: string
      Verified:
        type: boolean
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    required:
    - Email
    - Password
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is a sample goplock server.
  title: Goplock API
  version: v1
paths:
  /auth/login:
    post:
      description: Login User
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      responses: {}
      summary: Login
      tags:
      - Auth
  /auth/logout:
    delete:
      description: Logout User
      responses: {}
      summary: Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      description: Refresh Access Token
      responses: {}
      summary: Refresh Access Token
      tags:
      - Auth
  /auth/register:
    post:
      description: Register new User
      parameters:
      - description: Name
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Password Confirmation
        in: formData
        name: passwordConfirmation
        required: true
        type: string
      - description: Photo
        in: formData
        name: photo
        type: string
      responses: {}
      summary: Register
      tags:
      - Auth
  /users:
    get:
      description: Get all Users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get Users
      tags:
      - User
  /users/{id}:
    get:
      description: Get User by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get User
      tags:
      - User
produces:
- application/json
schemes:
- http
- https
swagger: "2.0"
